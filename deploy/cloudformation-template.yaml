AWSTemplateFormatVersion: '2010-09-09'
Description: 'Roasted Chessnuts - Chess game with AI commentary'

Parameters:
  DomainName:
    Type: String
    Description: Domain name for the application (e.g., chessnuts.example.com)
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID
  CertificateArn:
    Type: String
    Description: ACM Certificate ARN (must be in us-east-1 for CloudFront)
  DockerImageUri:
    Type: String
    Description: Full URI of the Docker image in ECR
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key
  DaisysEmail:
    Type: String
    NoEcho: true
    Description: Daisys Email
  DaisysPassword:
    Type: String
    NoEcho: true
    Description: Daisys Password
  DaisysVoiceId:
    Type: String
    Description: Daisys Voice ID
  InstanceType:
    Type: String
    Default: t3.small
    Description: EC2 instance type
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access

Resources:
  # Security Group for EC2 (using default VPC)
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Roasted Chessnuts
      SecurityGroupIngress:
        # Allow SSH from anywhere
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Restrict this in production
        # For now, allow HTTP from anywhere
        # Note: In production, you should:
        # 1. Use a custom header from CloudFront and verify it in your app
        # 2. Or use AWS WAF with CloudFront
        # 3. Or use an ALB with security group rules
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # Instance Profile
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M  # 15 minutes timeout
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          
          # Install Docker and Docker Compose
          yum update -y
          yum install -y docker
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          
          # Create CloudWatch log group FIRST (before any Docker operations)
          aws logs create-log-group --log-group-name /aws/ec2/roasted-chessnuts --region ${AWS::Region} || true
          
          # Login to ECR
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${DockerImageUri}
          
          # Create app directory
          mkdir -p /home/ec2-user/app
          cd /home/ec2-user/app
          
          # Create docker-compose.yml
          cat > docker-compose.yml << 'EOF'
          services:
            app:
              image: ${DockerImageUri}
              ports:
                - "80:8000"
              environment:
                OPENAI_API_KEY: ${OpenAIApiKey}
                DAISYS_EMAIL: ${DaisysEmail}
                DAISYS_PASSWORD: ${DaisysPassword}
                DAISYS_VOICE_ID: ${DaisysVoiceId}
                PYTHONUNBUFFERED: 1
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              logging:
                driver: awslogs
                options:
                  awslogs-group: /aws/ec2/roasted-chessnuts
                  awslogs-region: ${AWS::Region}
                  awslogs-stream: roasted-chessnuts-app
          EOF
          
          # Start the application
          docker-compose pull
          
          # Create systemd service for auto-restart
          cat > /etc/systemd/system/roasted-chessnuts.service << 'EOF'
          [Unit]
          Description=Roasted Chessnuts Docker Compose Application
          After=docker.service
          Requires=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/home/ec2-user/app
          ExecStart=/usr/local/bin/docker-compose up -d
          ExecStop=/usr/local/bin/docker-compose down
          StandardOutput=journal
          StandardError=journal
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Enable the service to start on boot
          systemctl daemon-reload
          systemctl enable roasted-chessnuts.service
          systemctl start roasted-chessnuts.service
          
          # Health check function
          health_check() {
              local max_attempts=60  # 5 minutes (60 * 5 seconds)
              local attempt=1
              
              echo "Waiting for application to become healthy..."
              
              while [ $attempt -le $max_attempts ]; do
                  # Check if container is running
                  if docker-compose ps | grep -q "Up"; then
                      # Check if application responds to HTTP
                      if curl -f http://localhost/api/health >/dev/null 2>&1; then
                          echo "Application is healthy!"
                          return 0
                      fi
                  fi
                  
                  echo "Health check attempt $attempt/$max_attempts failed, retrying in 5 seconds..."
                  sleep 5
                  attempt=$((attempt + 1))
              done
              
              echo "Health check failed after $max_attempts attempts"
              return 1
          }
          
          # Install CloudFormation helper scripts
          yum install -y aws-cfn-bootstrap
          
          # Perform health check
          if health_check; then
              # Signal success to CloudFormation
              /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
          else
              # Signal failure to CloudFormation
              /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
          fi
      Tags:
        - Key: Name
          Value: RoastedChessnuts

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: Roasted Chessnuts
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
        Origins:
          - Id: EC2Origin
            DomainName: !GetAtt EC2Instance.PublicDnsName
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: EC2Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: true
            Headers:
              - Host
              - Origin
              - Referer
              - CloudFront-Forwarded-Proto
            Cookies:
              Forward: all
          # Default: cache HTML for 5 minutes
          DefaultTTL: 300
          MinTTL: 0
          MaxTTL: 300
        CacheBehaviors:
          # Cache static Next.js assets (immutable)
          - PathPattern: /_next/static/*
            TargetOriginId: EC2Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: false
              Headers: []
              Cookies:
                Forward: none
            DefaultTTL: 31536000  # 1 year
            MinTTL: 31536000
            MaxTTL: 31536000
          # Cache favicon
          - PathPattern: /favicon.ico
            TargetOriginId: EC2Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: false  # ICO files are already compressed
            ForwardedValues:
              QueryString: false
              Headers: []
              Cookies:
                Forward: none
            DefaultTTL: 2592000  # 30 days
            MinTTL: 0
            MaxTTL: 31536000
          # Cache JavaScript libraries (Daisys WebSocket)
          - PathPattern: /js/*
            TargetOriginId: EC2Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: false
              Headers: []
              Cookies:
                Forward: none
            DefaultTTL: 2592000  # 30 days
            MinTTL: 0
            MaxTTL: 31536000
          # Cache static assets (if you move SVGs here)
          - PathPattern: /static/*
            TargetOriginId: EC2Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: false
              Headers: []
              Cookies:
                Forward: none
            DefaultTTL: 604800  # 1 week
            MinTTL: 0
            MaxTTL: 31536000
          # API endpoints - no caching
          - PathPattern: /api/*
            TargetOriginId: EC2Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ForwardedValues:
              QueryString: true
              Headers:
                - '*'
              Cookies:
                Forward: all
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
        PriceClass: PriceClass_100

  # Route53 Record
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront Hosted Zone ID
        DNSName: !GetAtt CloudFrontDistribution.DomainName

Outputs:
  CloudFrontURL:
    Description: CloudFront distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
  DomainURL:
    Description: Application URL
    Value: !Sub 'https://${DomainName}'
  EC2InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
  EC2PublicIP:
    Description: EC2 Public IP
    Value: !GetAtt EC2Instance.PublicIp
  EC2PublicDNS:
    Description: EC2 Public DNS
    Value: !GetAtt EC2Instance.PublicDnsName
  SSHCommand:
    Description: SSH command to connect to instance
    Value: !Sub 'ssh -i ${KeyName}.pem ec2-user@${EC2Instance.PublicDnsName}'
